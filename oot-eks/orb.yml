version: 2.1
description: "Opinionated commands for releasing projects on AWS EKS."

orbs:
  aws-cli: circleci/aws-cli@1.2.1
  aws-ecr: circleci/aws-ecr@6.12.2
  aws-eks: circleci/aws-eks@1.0.0
  kubernetes: circleci/kubernetes@0.11.1
  snyk: snyk/snyk@0.0.10
  shipit: ovotech/shipit@1

commands:
  push:
    description: "Builds and pushes a new service to ECR and then deploys that image to EKS."
    parameters:
      service:
        description: "The name of the service that will be deployed. This will be used to build up the image name."
        type: string
      eks-cluster-name:
        description: "The name of the AWS EKS cluster to be deployed to."
        type: string
      access-key-name:
        description: "The name of the environment variable that will be used to provide the AWS access key id."
        type: string
        default: ACCESS_KEY_ID
      secret-access-key-name:
        description: "The name of the environment variable that will be used to provide the AWS secret access key."
        type: string
        default: SECRET_ACCESS_KEY
      account:
        description: "The numeric identifier for the AWS account on which the operation will be run."
        type: string
        default: ${AWS_ACCOUNT}
      region:
        description: "The AWS region on which the operation will be run."
        type: string
        default: eu-west-1
      environment:
        description: "Environment string used for substitution in the kubernetes files."
        type: string
        default: ${ENVIRONMENT}

    steps:
      - attach_workspace:
          at: .

      - run:
          command: |
            echo "export AWS_DEFAULT_REGION=<< parameters.region >>" >> $BASH_ENV
            echo "export AWS_REGION=eu-west-1" >> $BASH_ENV
            echo "export AWS_ECR_ACCOUNT_URL=<< parameters.account >>.dkr.ecr.<< parameters.region >>.amazonaws.com" >> $BASH_ENV

      - aws-cli/install
      - aws-cli/setup:
          aws-access-key-id: << parameters.access-key-name >>
          aws-secret-access-key: << parameters.secret-access-key-name >>

      - aws-ecr/build-image:
          account-url: AWS_ECR_ACCOUNT_URL
          aws-access-key-id: << parameters.access-key-name >>
          aws-secret-access-key: << parameters.secret-access-key-name >>
          repo: << parameters.service >>
          tag: ${CIRCLE_SHA1},latest
          ecr-login: true

      - snyk/scan:
          monitor-on-build: true
          severity-threshold: high
          fail-on-issues: false
          target-file: Dockerfile
          docker-image-name: $AWS_ECR_ACCOUNT_URL/<< parameters.service >>:${CIRCLE_SHA1}

      - aws-ecr/push-image:
          repo: << parameters.service >>
          tag: ${CIRCLE_SHA1},latest

      - run:
          command: |
            sed -i "s/{{AWS_ACCOUNT_ID}}/<< parameters.account >>/g" ./kubernetes/deployment.yaml
            sed -i "s/{{IMAGE_TAG}}/${CIRCLE_SHA1}/g" ./kubernetes/deployment.yaml
            sed -i "s/{{ENVIRONMENT}}/<< parameters.environment >>/g" ./kubernetes/deployment.yaml

      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.eks-cluster-name >>
          aws-region: << parameters.region >>
          install-kubectl: true

      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: kubernetes/deployment.yaml
          resource-name: deployment/<< parameters.service >>
          show-kubectl-command: true

jobs:
  shipit:
    description: "Alerts ShipIt to the fact that the service has been deployed."
    executor: shipit/default
    steps:
      - shipit/shipit

executors:
  aws:
    machine:
      image: ubuntu-1604:201903-01



version: 2.1
description: "Defines the core steps required for a smart journey deployment pipeline"

orbs:
  aws-ecr: circleci/aws-ecr@6.3.0
  terraform: ovotech/terraform@1.6
  openjdk-install: cloudesire/openjdk-install@1.2.3
  snyk: snyk/snyk@0.0.10
  shipit: ovotech/shipit@1

executors:
  kotlin:
    docker:
      - image: circleci/openjdk:11.0.7-jdk-buster

aliases:
  parameters:
    context: &context
      context:
        type: "string"
        description: "context to be used on build"

    environment: &environment
      environment:
        type: "enum"
        enum: ["sandbox", "nonprod", "prod"]
        default: "sandbox"
    subproject: &subproject
      subproject:
        type: "string"

  avro-setup: &avro-setup
    run:
      name: Upload Avro and run compatibility checks
      command: |
        set -eu
        sudo chmod +x gradlew
        export AWS_REGION=${AWS_DEFAULT_REGION}

        if [[ << parameters.uploadschema >> == "true" ]]
        then
        ./gradlew avroUploadTask --full-stacktrace
        ./gradlew avroCheckCompatibleTask -PallowNotFound=false -Pprofile=$PROFILE --full-stacktrace
        else
        ./gradlew avroCheckCompatibleTask -PallowNotFound=true -Pprofile=$PROFILE --full-stacktrace
        fi

  build-project: &build-project
    run:
      name: Build project
      command: |
        set -eu
        sudo chmod +x gradlew
        ./gradlew :<< parameters.subproject >>:clean :<< parameters.subproject >>:buildNeeded -Pprofile=$PROFILE -x integrationTest --full-stacktrace

  save-test-results: &save-test-results
    run:
      name: Save test results
      command: |
        set -eu
        mkdir -p ~/test-results/junit/
        find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;
        mkdir -p ~/reports/jacoco/
        find . -type f -regex ".*/build/jacoco-reports/test/.*xml" -exec cp {} ~/reports/jacoco \;
        cp -r << parameters.subproject >>/build/jacoco-reports/html ~/reports/jacoco

  calculate-build-version: &calculate-build-version
    run:
      name: calculate version
      command: |
        #!/bin/bash
        set -eu
        echo "export TF_VAR_release_version=${CIRCLE_TAG:-$CIRCLE_BRANCH-${CIRCLE_SHA1:0:8}}" >> $BASH_ENV
        echo "export TF_VAR_build_tag=${CIRCLE_SHA1}" >> $BASH_ENV

  run-integration-test: &run-integration-test
    run:
      name: Run Integration tests
      command: |
        set -eu
        sudo chmod +x gradlew
        #export AWS_REGION=${AWS_DEFAULT_REGION}
        ./gradlew :<< parameters.subproject >>:integrationTest -Pprofile=${PROFILE} --full-stacktrace

  set-environment-variables: &set-environment-variables
    run:
      name: Set Profile Variable
      command: |
        set -eu
        echo 'export PROFILE='<< parameters.environment >>'' >> $BASH_ENV
        echo "export VERSION=${CIRCLE_TAG:-$CIRCLE_BRANCH-${CIRCLE_SHA1:0:8}}" >> $BASH_ENV

  tf-mask: &tf-mask
    TFMASK_CHAR: "#"
    TFMASK_RESOURCES_REGEX: "(?i)^(ovo_kafka_user|random_password|random_id|random_string).*$"
    TFMASK_VALUES_REGEX: "(?i)^.*(oauth|secret|token|password|key|result).*$"

  tf-common: &tf-common
    executor: terraform/terraform-0_12
    parameters:
      path:
        type: string
        default: ""
      <<: *environment

  tf-parameters: &tf-parameters
    path: terraform/<< parameters.path >>
    backend_config_file: env/<< parameters.environment >>.tf
    var_file: << parameters.environment >>.tfvars
    label: << parameters.environment >>

jobs:
  checkout-code:
    executor: kotlin
    working_directory: ~/working
    steps:
      - checkout
      - persist_to_workspace:
          root: .
          paths:
            - .
  avro:
    executor: kotlin
    working_directory: ~/working
    parameters:
      uploadschema:
        type: boolean
        default: false
      <<: *environment
    steps:
      - attach_workspace:
          at: ~/working
      - restore_cache:
          key: gradle-{{ checksum "build.gradle" }}
      - *set-environment-variables
      - *avro-setup

  build-and-test:
    parameters:
      <<: *subproject
      <<: *environment
      publish:
        type: boolean
        default: false
    executor: kotlin
    working_directory: ~/working
    steps:
      - attach_workspace:
          at: ~/working
      - restore_cache:
          key: gradle-{{ checksum "build.gradle" }}-{{ checksum "<< parameters.subproject >>/build.gradle" }}
      - *set-environment-variables
      - *build-project
      - save_cache:
          paths:
            - .gradle
            - ~/.gradle
          key: gradle-{{ checksum "build.gradle" }}-{{ checksum "<< parameters.subproject >>/build.gradle" }}
      - *save-test-results
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit
      - store_artifacts:
          path: ~/reports/jacoco
      - when:
          condition: << parameters.publish >>
          steps:
            - aws-ecr/build-and-push-image:
                setup-remote-docker: true
                checkout: false
                account-url: AWS_ACCOUNT_URL
                aws-access-key-id: AWS_ACCESS_KEY_ID
                aws-secret-access-key: AWS_SECRET_ACCESS_KEY
                dockerfile: ./<< parameters.subproject >>/Dockerfile
                path: ./<< parameters.subproject >>
                create-repo: false
                region: AWS_DEFAULT_REGION
                repo: << parameters.subproject >>
                tag: "latest,$CIRCLE_SHA1"
            - snyk/scan:
                docker-image-name: $AWS_ACCOUNT_URL/<< parameters.subproject >>:latest
                fail-on-issues: true
                monitor-on-build: true
                project: << parameters.subproject >>
                severity-threshold: high
                target-file: ./<< parameters.subproject >>/Dockerfile

  snyk-scan:
    executor: kotlin
    working_directory: ~/working
    steps:
      - attach_workspace:
          at: ~/working
      - run:
          name: Make Files Executable
          command: |
            sudo chmod +x gradlew
      - snyk/scan:
          additional-arguments: --all-sub-projects --configuration-attributes=buildtype:release,usage:java-runtime
          severity-threshold: high

  notify-shipit:
    executor: shipit/default
    steps:
      - shipit/shipit:
          team-name: Smart Journeys

  integration-test:
    parameters:
      <<: *subproject
      <<: *environment
      run_integration_tests:
        type: boolean
        default: true
    machine:
      docker_layer_caching: false
    working_directory: ~/working
    steps:
      - attach_workspace:
          at: ~/working
      - when:
          condition: << pipeline.parameters.run_integration_tests >>
          steps:
            - openjdk-install/openjdk:
                version: 11
            - restore_cache:
                key: gradle-{{ checksum "build.gradle" }}-{{ checksum "<< parameters.subproject >>/build.gradle" }}
            - *set-environment-variables
            - *run-integration-test
            - store_test_results:
                path: << parameters.subproject >>/build/test-results/integrationTest

  lint: # lint locally on commit "pip install pre-commit && pre-commit install" and on-demand "pre-commit run --all"
    docker:
      - image: hashicorp/terraform:light
    steps:
      - checkout
      - run: terraform fmt -no-color -check -diff -recursive

  tf-plan:
    <<: *tf-common
    description: tf-plan << parameters.environment >>
    environment:
      <<: *tf-mask
    steps:
      - checkout
      - *calculate-build-version
      - terraform/plan: *tf-parameters

  tf-apply:
    <<: *tf-common
    description: tf-apply-<< parameters.environment >>
    environment:
      <<: *tf-mask
    steps:
      - checkout
      - *calculate-build-version
      - terraform/apply:
          auto_approve: true
          <<: *tf-parameters
